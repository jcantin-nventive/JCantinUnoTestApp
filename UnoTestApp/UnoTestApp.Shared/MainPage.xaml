<Page x:Class="UnoTestApp.MainPage"
	  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	  xmlns:local="using:UnoTestApp"
	  xmlns:b="using:UnoTestApp.Behaviors"
	  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	  xmlns:toolkit="using:Uno.UI.Toolkit"
	  xmlns:xamarin="http://nventive.com/xamarin"
	  xmlns:android="http://nventive.com/android"
	  xmlns:ios="http://nventive.com/ios"
	  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	  mc:Ignorable="d xamarin android ios">

	<Page.DataContext>
		<local:ViewModel />
	</Page.DataContext>

	<Page.Resources>

		<local:ZeroToCustomConverter x:Key="ZeroToTransparent"
									 ZeroValue="Transparent"
									 NonZeroValue="White" />

		<local:ZeroToCustomConverter x:Key="ZeroToZero"
									 ZeroValue="0"
									 NonZeroValue="1" />

		<Style x:Key="TransparentCommandBarStyle"
			   TargetType="CommandBar"
			   xamarin:BasedOn="{StaticResource NativeDefaultCommandBar}">
			<!-- COMMON SETTERS -->
			<Setter Property="toolkit:CommandBarExtensions.BackButtonForeground"
					Value="{StaticResource Color02}" />
			<Setter Property="Background"
					Value="Transparent" />
			<Setter Property="Foreground"
					Value="{StaticResource Color03}" />

			<!-- StatusBarThickness Padding set here in order to fix those two known issues:
				On iOS the content will be underneath the CommandBar
				On Android the CommandBar will be underneath the StatusBar
				The "StatusBarThickness" resource is one which is programmatically added at runtime, with a value that changes depending on the platform/device. -->
			<Setter Property="Padding"
					Value="{StaticResource StatusBarThickness}" />
			<!-- Uncomment when android is fixed -->
			<!--<Setter Property="toolkit:VisibleBoundsPadding.PaddingMask"
				Value="Top" />-->

			<!-- Setting content to empty to avoid getting the datacontext-->
			<Setter Property="Content"
					Value="" />

			<!-- ANDROID SETTERS -->
			<android:Setter Property="toolkit:UIElementExtensions.Elevation"
							Value="{StaticResource CommandBarElevation}" />

			<!-- IOS SETTERS -->
			<!-- Remove the back button title (and only leave the back arrow) -->
			<ios:Setter Property="(toolkit:CommandBarExtensions.BackButtonTitle)"
						Value="" />
			<ios:Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="CommandBar">
						<!-- 
						Context:
						On iOS, all pages share the same UINavigationBar instance.
						During a transition from two pages with different CommandBar colors, the shared UINavigationBar bar instance can only display one of those colors.
					
						Example:
						Page A has an opaque CommandBar and Page B has a transparent CommandBar.
						When transitioning from Page A to Page B, the shared UINavigationBar instance becomes transparent, which reveals a white space at the top of Page A.
					
						Solution:
						To circumvent this issue, we duplicate the background color of the UINavigationBar with this Border.
						Note that this only works because we're not using semi-transparent background colors (which would add up and look off). 
					-->
						<Border BorderBrush="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}">
							<NativeCommandBarPresenter Height="44" />
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</ios:Setter>
		</Style>
	</Page.Resources>

	<Grid Background="Red">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
		</Grid.RowDefinitions>

		<ScrollViewer Grid.RowSpan="2"
					  b:ScrollViewerRelativeOffsetBehavior.IsEnabled="True"
					  b:ScrollViewerRelativeOffsetBehavior.RelativeOffset="{Binding RelativeOffset, Mode=TwoWay}">
			<TextBlock FontSize="40"
					   Margin="0,40,0,0">
				<Run Text="Text 1" />
				<LineBreak />
				<Run Text="Text 2" />
				<LineBreak />
				<Run Text="Text 3" />
				<LineBreak />
				<Run Text="Text 4" />
				<LineBreak />
				<Run Text="Text 5" />
				<LineBreak />
				<Run Text="Text 6" />
				<LineBreak />
				<Run Text="Text 7" />
				<LineBreak />
				<Run Text="Text 8" />
				<LineBreak />
				<Run Text="Text 9" />
				<LineBreak />
				<Run Text="Text 10" />
				<LineBreak />
				<Run Text="Text 11" />
				<LineBreak />
				<Run Text="Text 12" />
				<LineBreak />
				<Run Text="Text 13" />
				<LineBreak />
				<Run Text="Text 14" />
				<LineBreak />
				<Run Text="Text 15" />
				<LineBreak />
				<Run Text="Text 16" />
				<LineBreak />
				<Run Text="Text 17" />
				<LineBreak />
				<Run Text="Text 19" />
				<LineBreak />
				<Run Text="Text 20" />
				<LineBreak />
				<Run Text="Text 21" />
				<LineBreak />
				<Run Text="Text 22" />
				<LineBreak />
				<Run Text="Text 23" />
				<LineBreak />
				<Run Text="Text 24" />
				<LineBreak />
				<Run Text="Text 25" />
				<LineBreak />
				<Run Text="Text 26" />
				<LineBreak />
				<Run Text="Text 27" />
				<LineBreak />
				<Run Text="Text 28" />
				<LineBreak />
				<Run Text="Text 29" />
				<LineBreak />
				<Run Text="Text 30" />
			</TextBlock>
		</ScrollViewer>

		<Border Background="White"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				Opacity="{Binding RelativeOffset, Converter={StaticResource ZeroToZero}, FallbackValue=0}"
				x:Name="HidingBorder"/>

		<CommandBar Content="This is the title"
					Background="{Binding RelativeOffset, Converter={StaticResource ZeroToTransparent}, FallbackValue=Transparent}"
					Style="{StaticResource TransparentCommandBarStyle}"
					x:Name="MyCommandBar"
					Height="80" />
	</Grid>
</Page>
